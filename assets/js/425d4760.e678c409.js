"use strict";(self.webpackChunknode_cli_docs=self.webpackChunknode_cli_docs||[]).push([[1939],{1268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(4848),i=n(8453);const o={},r="Types of tests",a={id:"cardano-devs/contributing/Running-tests",title:"Running-tests",description:"Assuming you can already build cardano-node, running all the tests is as simple as:",source:"@site/docs/cardano-devs/contributing/Running-tests.md",sourceDirName:"cardano-devs/contributing",slug:"/cardano-devs/contributing/Running-tests",permalink:"/documentation/cardano-devs/contributing/Running-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cardano-devs/contributing/Running-tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Git-submodules-guide",permalink:"/documentation/cardano-devs/contributing/Git-submodules-guide"},next:{title:"Haskell Style Guide",permalink:"/documentation/cardano-devs/contributing/Style-guide"}},l={},c=[{value:"Golden tests",id:"golden-tests",level:2},{value:"Property tests",id:"property-tests",level:2},{value:"Integration tests",id:"integration-tests",level:2},{value:"Limiting the scope of executed tests",id:"limiting-the-scope-of-executed-tests",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Assuming you can already build ",(0,s.jsx)(t.code,{children:"cardano-node"}),", running all the tests is as simple as:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cabal test all --enable-tests\n"})}),"\n",(0,s.jsxs)(t.p,{children:['Many of tests are automatically run in CI in PRs.\nFor an exact list of which tests are run,\nplease see the "Run tests" step in ',(0,s.jsx)(t.a,{href:"https://github.com/intersectmbo/cardano-node/blob/master/.github/workflows/haskell.yml",children:"haskell.yml"})," Github\nActions workflow file."]}),"\n",(0,s.jsx)(t.h1,{id:"types-of-tests",children:"Types of tests"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"cardano-node"})," repository hosts multiple packages, each with their respective tests.\nThe tests fall into the following categories:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Golden tests"}),"\n",(0,s.jsx)(t.li,{children:"Property tests"}),"\n",(0,s.jsx)(t.li,{children:"Integration tests"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"golden-tests",children:"Golden tests"}),"\n",(0,s.jsx)(t.p,{children:"These are tests which perform some action that produces a file and tests if those files contain the expected contents."}),"\n",(0,s.jsxs)(t.p,{children:["To be a golden test, a copy of the expected output must be checked into ",(0,s.jsx)(t.code,{children:"git"})," as a file.\nSuch a file is called the golden file.\nTests that do not do a golden file are not golden tests."]}),"\n",(0,s.jsxs)(t.p,{children:["It is recommended that the ",(0,s.jsx)(t.code,{children:"diffVsGoldenFile"})," function be used to perform the comparison:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-haskell",children:"diffVsGoldenFile\n  :: HasCallStack\n  => (MonadIO m, MonadTest m)\n  => String   -- ^ Actual content\n  -> FilePath -- ^ Reference file\n  -> m ()\ndiffVsGoldenFile actualContent referenceFile = ...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This function will compare the ",(0,s.jsx)(t.code,{children:"actualContent"})," with the contents of the ",(0,s.jsx)(t.code,{children:"referenceFile"}),".\nIf the file does not exist or the contents differ, then the test fails."]}),"\n",(0,s.jsx)(t.p,{children:"There are two circumstances where is convenient to have the golden files created automatically."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"When writing tests for the first time"}),"\n",(0,s.jsx)(t.li,{children:"When an intended breaking change occurs"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["To do this defined the ",(0,s.jsx)(t.code,{children:"CREATE_GOLDEN_FILES=1"})," environment variable before running the test.\nFor example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"CREATE_GOLDEN_FILES=1 cabal test ...\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will only create the golden file if it doesn't already exist.\nFor the case where you are intentionally introducing a breaking change, delete the existing golden file so that it can be regenerated."}),"\n",(0,s.jsx)(t.h2,{id:"property-tests",children:"Property tests"}),"\n",(0,s.jsxs)(t.p,{children:["We use ",(0,s.jsx)(t.a,{href:"https://github.com/hedgehogqa/haskell-hedgehog",children:(0,s.jsx)(t.code,{children:"hedgehog"})})," for property tests."]}),"\n",(0,s.jsxs)(t.p,{children:["These tests typically are defined in functions starting with the prefix ",(0,s.jsx)(t.code,{children:"prop_"})," and have the type ",(0,s.jsx)(t.code,{children:"Property"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"integration-tests",children:"Integration tests"}),"\n",(0,s.jsxs)(t.p,{children:["We use ",(0,s.jsx)(t.a,{href:"https://github.com/hedgehogqa/haskell-hedgehog",children:(0,s.jsx)(t.code,{children:"hedgehog"})})," and ",(0,s.jsx)(t.a,{href:"https://github.com/input-output-hk/hedgehog-extras",children:(0,s.jsx)(t.code,{children:"hedgehog-extras"})})," for integration tests."]}),"\n",(0,s.jsxs)(t.p,{children:["The advantage of using ",(0,s.jsx)(t.code,{children:"hedgehog"})," for this purpose is that ",(0,s.jsx)(t.code,{children:"hedgehog"})," provides reports that annotate source code with additional information about the running of the test up to and including the failure.\nThe annotations can be for things like:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Values used during the test"}),"\n",(0,s.jsx)(t.li,{children:"Command line arguments used to run processes"}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"stdout"})," and ",(0,s.jsx)(t.code,{children:"stderr"})," of processes that have been run"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["A walkthrough of the leadership-schedule integration test can be found in this PR: ",(0,s.jsx)(t.a,{href:"https://github.com/intersectmbo/cardano-node/pull/5082",children:"https://github.com/intersectmbo/cardano-node/pull/5082"})]}),"\n",(0,s.jsx)(t.h1,{id:"tips--tricks",children:"Tips & tricks"}),"\n",(0,s.jsx)(t.h2,{id:"limiting-the-scope-of-executed-tests",children:"Limiting the scope of executed tests"}),"\n",(0,s.jsxs)(t.p,{children:["We're using ",(0,s.jsx)(t.a,{href:"https://hackage.haskell.org/package/tasty",children:(0,s.jsx)(t.code,{children:"tasty"})})," as a testing framework in most places.\nYou can use ",(0,s.jsx)(t.code,{children:"TASTY_PATTERN"})," shell variable to limit the tests which get executed like that:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"TASTY_PATTERN='/golden view alonzo signed yaml/' cabal test cardano-cli\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, test case name is derived from ",(0,s.jsx)(t.code,{children:"hprop_golden_view_alonzo_signed_yaml"})," name by ",(0,s.jsx)(t.a,{href:"https://hackage.haskell.org/package/tasty-discover",children:(0,s.jsx)(t.code,{children:"tasty-discover"})})," plugin."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);