"use strict";(self.webpackChunknode_cli_docs=self.webpackChunknode_cli_docs||[]).push([[770],{9516:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var r=s(4848),i=s(8453);const o={},d="Status",t={id:"cardano-devs/ADR/ADR-2-Module-structure-for-generators",title:"Status",description:"\u2705 Adopted 2022-12-17",source:"@site/docs/cardano-devs/ADR/ADR-2-Module-structure-for-generators.md",sourceDirName:"cardano-devs/ADR",slug:"/cardano-devs/ADR/ADR-2-Module-structure-for-generators",permalink:"/cardano-devs/ADR/ADR-2-Module-structure-for-generators",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cardano-devs/ADR/ADR-2-Module-structure-for-generators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Status",permalink:"/cardano-devs/ADR/ADR-1-Default-eras-for-CLI-commands"},next:{title:"Status",permalink:"/cardano-devs/ADR/ADR-3-Dependencies-version-constraints-in-cabal-file"}},l={},c=[{value:"Status quo",id:"status-quo",level:2},{value:"Original motivation for <code>cardano-node</code> convention",id:"original-motivation-for-cardano-node-convention",level:2},{value:"Considerations",id:"considerations",level:2},{value:"Generators as a library &amp; production readiness",id:"generators-as-a-library--production-readiness",level:3},{value:"Generator types",id:"generator-types",level:3},{value:"Reasons to exclude",id:"reasons-to-exclude",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"status",children:"Status"}),"\n",(0,r.jsx)(n.p,{children:"\u2705 Adopted 2022-12-17"}),"\n",(0,r.jsx)(n.h1,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"In a project, it is desirable to have a standard module structure so that a developer can easily navigate the code base and know when they write new code they know where to put the code so that other people can find it."}),"\n",(0,r.jsxs)(n.p,{children:["At IOG, we do not yet have an organisation-level standard for organising modules.  Short of having an organisation-level standard, it is worthwhile for ",(0,r.jsx)(n.code,{children:"cardano-node"})," code to formally define the module structure for its code."]}),"\n",(0,r.jsx)(n.h2,{id:"status-quo",children:"Status quo"}),"\n",(0,r.jsx)(n.p,{children:"Different people have different ideas for how modules should be structured."}),"\n",(0,r.jsxs)(n.p,{children:["Across IOG projects excluding ",(0,r.jsx)(n.code,{children:"cardano-node"}),", we have the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-crypto-wrapper"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test-suite test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Crypto.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-crypto-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Crypto.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"byron-spec-ledger"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Hedgehog.Gen.Double"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Byron.Spec.Ledger.Core.Generators"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-ledger-byron"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test-suite cardano-ledger-byron-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Chain.Block.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-ledger-byron-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Chain.Block.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-ledger-shelley-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Ledger.Shelley.Generator.Block"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Ledger.Shelley.Serialisation.Generators"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"benchmark mainbench"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Cardano.Ledger.Shelley.Bench.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-prelude-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Prelude.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ouroboros-consensus-byron-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Consensus.Byron.Generators"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"plutus-chain-index-core"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test-suite plutus-chain-index-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Generators"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"plutus-example"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test-suite plutus-example-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.PlutusExample.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"plutus-core"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library plutus-core-testlib"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PlutusCore.Generators"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"PlutusCore.Generators.AST"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"benchmark cost-model-budgeting-bench"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Generators"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"small-steps-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["library`","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Control.State.Transition.Generator"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Control.State.Transition.Trace.Generator.QuickCheck"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Within ",(0,r.jsx)(n.code,{children:"cardano-node"}),", we have the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-api"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"library gen"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Gen.Cardano.Api"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Gen.Cardano.Api.Metadata"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Gen.Hedgehog.Roundtrip.Bech32"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cardano-node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test-suite cardano-node-test"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.Cardano.Node.Gen"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These can be summarised into the following conventions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Generators"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Gen.[Path]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Gen.Hedgehog.[Path]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Hedgehog.Gen.[Path]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"[Path].Generator"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"[Path].Generators.[SubPath]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"[Path].Generators"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"[Path].Generator.[Concern]"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"[Path].Gen"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.[Path].Gen"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.[Path].Generators"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Test.[Path].Generator.[SubPath]"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In the above ",(0,r.jsx)(n.code,{children:"Path"})," and ",(0,r.jsx)(n.code,{children:"SubPath"})," refer to some qualified module names or some prefix/suffix that the generator is associated with.  ",(0,r.jsx)(n.code,{children:"Concern"})," is something like ",(0,r.jsx)(n.code,{children:"QuickCheck"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The status quo can lead the developer to confusion in the following ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Sometimes the same module name has been used multiple times in different places.  For example ",(0,r.jsx)(n.code,{children:"Test.Cardano.Chain.Block.Gen"})," and ",(0,r.jsx)(n.code,{children:"Test.Cardano.Crypto.Gen"})," are examples of modules declared multiple times in different packages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Gen"}),", ",(0,r.jsx)(n.code,{children:"Generators"}),", ",(0,r.jsx)(n.code,{children:"Generator"})," are all variations of the same thing, so it is not clear which word should be used in a new module or which should be imported."]}),"\n",(0,r.jsxs)(n.li,{children:["It's what the components of the module name should be and in what order.  For example sometimes ",(0,r.jsx)(n.code,{children:"Test"}),", ",(0,r.jsx)(n.code,{children:"Hedgehog"}),", ",(0,r.jsx)(n.code,{children:"Gen"})," or ",(0,r.jsx)(n.code,{children:"[Path]"})," is the root.  Sometimes ",(0,r.jsx)(n.code,{children:"Gen"}),", ",(0,r.jsx)(n.code,{children:"Generator"}),", ",(0,r.jsx)(n.code,{children:"Generators"})," have been found in prefix, infix and suffix positions."]}),"\n",(0,r.jsx)(n.li,{children:"It is unclear given the module name whether the module is local to a test-suite, executable or benchmark component or if it is in a shared library."}),"\n",(0,r.jsx)(n.li,{children:"It is unclear whether a module is production code or non-production code (for example test)"}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"original-motivation-for-cardano-node-convention",children:["Original motivation for ",(0,r.jsx)(n.code,{children:"cardano-node"})," convention"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cardano-node"})," currently uses the ",(0,r.jsx)(n.code,{children:"Gen.[Path]"})," convention to identify modules that are exported from a library and ",(0,r.jsx)(n.code,{children:"Test.[Path].Gen"})," for modules that are local to a non-production component."]}),"\n",(0,r.jsx)(n.p,{children:"This allows for non-library components to define additional generators for itself that are not meant to be in a library without introducing a name conflict."}),"\n",(0,r.jsx)(n.p,{children:"It also makes it clear which modules are exported from a library and which are not."}),"\n",(0,r.jsxs)(n.p,{children:["To distinguish between production and non-production code the convention uses between ",(0,r.jsx)(n.code,{children:"Cardano.[Path]"})," for production code and ",(0,r.jsx)(n.code,{children:"[Prefix].Cardano.Path"})," for non-production code for example ",(0,r.jsx)(n.code,{children:"Test.Cardano.[Path]"})," and ",(0,r.jsx)(n.code,{children:"Gen.Cardano.[Path]"}),".  The distinction also prevents name collision between local and non-local modules."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Test"})," prefix was avoided for generators exported from a library because that gives the impression that may be false at some point in the future.  This is because generators may be used by a tool as well and not just tests.  For example a tool to generate random transactions."]}),"\n",(0,r.jsx)(n.h2,{id:"considerations",children:"Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"generators-as-a-library--production-readiness",children:"Generators as a library & production readiness"}),"\n",(0,r.jsxs)(n.p,{children:["Our generator code is already a library being exported as a library-component with the name ",(0,r.jsx)(n.code,{children:"cardano-api:gen"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is being used within the project as a library by ",(0,r.jsx)(n.code,{children:"cardano-api"})," and ",(0,r.jsx)(n.code,{children:"cardano-cli"})," test-suites."]}),"\n",(0,r.jsxs)(n.p,{children:["It is also being within the organisation as a library by ",(0,r.jsx)(n.code,{children:"plutus-apps"}),", also for testing only."]}),"\n",(0,r.jsxs)(n.p,{children:["Not adding the ",(0,r.jsx)(n.code,{children:"Test"})," prefix might imply that the code is for production purposes.  As a team we may want to consider whether we even want to support generators as production ready."]}),"\n",(0,r.jsx)(n.p,{children:"We definitely are not ready commit more resources to making generators production ready and as such we need to somehow signal that our generators are provided as-is."}),"\n",(0,r.jsx)(n.p,{children:"Moreover we will often want to take shortcuts both for resource constraint reasons and because the generator may be written with particular kinds of testing in mind.  As a result the generators may be intentionally or unintentionally non-representative."}),"\n",(0,r.jsx)(n.p,{children:"On the other hand its worthwhile to signal that our generators can be improved and that we accept organisation-level and community contributions since accepting such contributions would improve the quality of our testing."}),"\n",(0,r.jsx)(n.h3,{id:"generator-types",children:"Generator types"}),"\n",(0,r.jsxs)(n.p,{children:["We currently only write ",(0,r.jsx)(n.code,{children:"hedgehog"})," generators."]}),"\n",(0,r.jsxs)(n.p,{children:["Other kinds of generators exist as well, for example ",(0,r.jsx)(n.a,{href:"https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck-Gen.html",children:"QuickCheck"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Perhaps it is worth being clear our generators are in-fact ",(0,r.jsx)(n.code,{children:"hedgehog"})," generators."]}),"\n",(0,r.jsx)(n.h2,{id:"reasons-to-exclude",children:"Reasons to exclude"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Generators"})," - invites conflict between projects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Gen.[Path]"})," - might imply production readiness"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Gen.Hedgehog.[Path]"})," - might wrongly imply they belong to the hedgehog project"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Hedgehog.Gen.[Path]"})," - might wrongly imply they belong to the hedgehog project"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Hedgehog.[Path].Gen"})," - might wrongly imply they belong to the hedgehog project"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[Path].Generator"})," -- too verbose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[Path].Generators"})," -- too verbose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[Path].Gen"})," - might imply production readiness"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Test.[Path].Gen"})," - might imply the generator is test-only; could conflict with when we want to define test-specific generators."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Test.[Path].Generators"})," - too verbose; might imply the generator is test-only; could conflict with when we want to define test-specific generators."]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"decision",children:"Decision"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"This section is a placeholder for the teams actual decision pending team discussion."})}),"\n",(0,r.jsx)(n.p,{children:"Use the following convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Test.Gen.[Path]"}),": modules that are exported from a library"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Test.[Path].Gen"}),": modules that are local to a test component"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Bench.[Path].Gen"}),": modules that are local to a benchmark component"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[Path].Gen"}),": modules that are local to production component"]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This ADR serves as documentation for the current ",(0,r.jsx)(n.code,{children:"cardano-node"})," convention to ensure continued consistency within the project eliminating any confusion within the project.  ",(0,r.jsx)(n.code,{children:"node"})," and external developers alike can easily familiarise themselves with this convention."]}),"\n",(0,r.jsx)(n.li,{children:"Motivations for this convention are clear."}),"\n",(0,r.jsx)(n.li,{children:"There remains no standardisation across the IOG organisation which can continue to lead to cross project confusions."}),"\n",(0,r.jsx)(n.li,{children:"Whilst standardisation remains a worthwhile cause, we don't second guess what an organisation level standard might look like and avoiding having to refactor yet again."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var r=s(6540);const i={},o=r.createContext(i);function d(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);